<HTML>
<HEAD>
 <TITLE>Searching Memory</TITLE>
 <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
 <LINK rel="StyleSheet" href="../default.css">

</HEAD>
<BODY>

<H1>Searching memory</H1>

<p> The debugger lets you search memory for patterns. The patterns can consist
  of character strings, hexadecimal byte strings, or 1-, 2-, or 4-byte integers.
  You can searach memory both forwards and backwards, and search for integers
  under a mask.</p>

<p>The search covers a range of memory you can specify by start address and length.
  The default start address is 0 and the default length is 0xffff_ffff (all of
  possible memory). You can specify an arbitrary expression for the start and
  length.</p>

<p>After the debugger finds a pattern, it shows a <a href="../displays/Memory_Display.htm">Memory</a> 
  window starting at the address where the pattern was found. You can then continue 
  the search from where the last pattern was found.</P>

<p>If you search for a string, the debugger searches for it at all addresses in
  the range. If you search for an integer value, the debugger searches for it
  at the start address plus multiples of the size. For example, if you search
  for a 2-byte integer starting at address 0x1000, the debugger searches locations
  0x1000, 0x1002, 0x1004, etc.</p>


<h4>Command-line syntax</h4>
<p>To enter a command to search memory, use the following commands. The start
  address and length are optional. If you omit length, all of memory is assumed.
  If you omit start, 0 is assumed.</p>
<p>Character strings:</p>
<pre>
    mems "string"   start length
</pre>
<p>Hexadecimal strings:</p>
<pre>
    mems 0hdeadbeef start length
</pre>
<p>Integers:</p>
<pre>
       mems 4-byte-value start length
    /s mems 2-byte-value start length
    /c mems 1-byte-value start length
</pre>
<p>The value is any arbitrary expression.</p>
<p>Use "memsb" to search backwards,"mems" to search forwards. Press Enter after
  a search to resume searching. Press any key during a search to interrupt the
  search. You can also type "memsb" or "mems" to resume a search; this is useful
  when you want to resume the search in reverse.</p>
<h3>Hexadecimal strings</h3>
<p>A hexadecimal string can be a sequence of hexadecimal digits or the wildcard
  character '?'. For example:</P>
<pre><code>
    7ff
    deadbeef
    dea?beef
</code></pre>
<p>Character strings. A character string can be a sequence of characters enclosed
  in double quotes (&quot;string&quot;). The character string may contain the
  wildcardcharacter '?'. The character string may also contain the following two-character
  "escape sequences": </p>
<pre>
    Escape      Stands for character
    --------    --------------------
    \?          ?
    \n          newline (ASCII 10)
    \t          tab (ASCII 9)
    \0          0 (ASCII 0)
    ...
    \9          9 (ASCII 9)
    \X          X where X is anything not
                    in the list above
</pre>
Examples of character strings:
<pre>
    "abc"
    "Hello, world.\n"
    "Hello, ?????.\n"
</pre>
<p><i>Note:</I> There is no wildcard character * meaning zero or more characters.
</p>
<p>An integer can be an arbitrary expresion that evaluates to a 1-, 2-, or 4-byte
  value. For example:
<pre>
    r15
    p->x
    0x1234
    a[i+1]
</pre>
<p>The debugger searches for integers under mask. A match occurs if (integer &
  mask) = (value-in-memory & mask). The default mask is -1, i.e., all bits 1,
  meaning the mask has no restrictive effect. But searching for 0x9ac0 under mask
  0xfffc would mean that the values 0x9ac0, 0x9ac1, 0x9ac2, and 0x9ac3 match.
  You can specify an arbitrary expression for the mask.</p>

<p>For little-endian targets, the debugger extracts integers from the searched
  location with the appropriate endian reversal. For example, the value 0xaabb
  is represented in memory as the sequence of bytes bb aa. Thus searching for
  the integer 0xaabb is like searching for the hexadecimal string bbaa.</p>

<p>The mask allows you to "wildcard" any individual bit in a searched-for integer.</p>

<p>You can specifiy binary numbers with the syntax 0x2xbinary-digits. This is
  the same extension as in High C/C++ language. For example, 0x2x1001_1110 is
  the same as 0x9e.</p>

<p>&nbsp;</p>
</BODY>
</HTML>
