<html>

<head>

<title>Instruction History window</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel=StyleSheet href="../default.css">

</head>

<body>

<h1>Instruction History window</h1>

<p>The Instruction History window shows the most recently executed instructions. 
  The instructions are retrieved from a &quot;trace buffer&quot; that the target 
  maintains.</p>

<p><i>Note:</i>&nbsp;&nbsp;Currently, the only targets that maintain an instruction 
  history are the MetaWare&#174; simulators for ARM, picoJava, and ARC processors.</p>

<p>When the left margin shows:</p>

<ul>
  <li>a green arrow means execution is stopped at the location specified by the 
    breakpoint.</li>
  <li>a red indicator to the left of a line means there is a breakpoint at that 
    location.</li>
  <li>a hollow red indicator means the breakpoint at that location is disabled.</li>
  <li>a magenta arrow indicates the line that is being shown in the assembly display.</li>
  <li>a yellow triangle indicates a marker placed at that location.</li>
  <li>(multi-threaded programming only) a red indicator containing the letter 
    &quot;T&quot; within it, it means the breakpoint is specific to a thread. 
    You can determine which thread by looking at the breakpoint in the Breakpoint 
    display.</li>
</ul>
<p>The Instruction History window displays the result of a &quot;trace capture&quot; 
  of the executing program. Typically the trace capture comprises the instructions 
  most recently executed by the program. The instructions are retrieved from a 
  &quot;trace buffer&quot; maintained by the target.</p>
<p>The instructions are listed with the most recent instruction at the bottom 
  of the display. The instruction numbered 0 is the last instruction executed.</p>
<h2>Viewing instruction history and registers in context</h2>
<p>Double-click on an instruction to bring up a <a href="Disassembly_display.htm">Disassembly</a> 
  window showing that instruction in its context. If the trace history has register 
  writes in it, a register window is produced showing the contents of the register 
  set at that point in the trace. In such a register display, dashes indicate 
  that the debugger has no knowledge of that register's value.</p>
<h2>Filtering trace items</h2>
<p>The <b>Filter</b> menu, if present, allows you to include or exclude certain 
  trace items. Generally, all are included by default, although the provider of 
  the trace items may choose to have some turned off by default. Press the &quot;NoFil&quot; 
  button to ignore all filtering; press it again to restore filtering.</p>
<p>The instruction set simulators maintain such trace buffers. For most simulators, 
  you can configure the size of the buffer and the nature of its contents with 
  the Capture menu selection.</p>
<h2>Filtering using regular expressions</h2>
<p>The <b>Reg expn</b> (Regular Expression) text field permits finding or showing 
  only elements that match the expression. When you enter a regular expression 
  and click <b>Match</b>, only those lines matching the expression will be displayed. 
  The arrow buttons search for the next matching line in either direction.</p>
<p>If your trace contains fields indicated by the <b>Fields</b> button being enabled, 
  you can also do boolean expression matches.</p>
<p>A boolean expression is a C expression whose constituents includes &quot;fields&quot; 
  in the trace. Each trace item may have fields; it depends on the entity doing 
  the capture (the fields are not defined by the debugger). You can see which 
  fields are available by clicking the Fields button, which toggles on and off 
  the display of the fields. Each field has a 32-bit value you can use in the 
  expression. You name a field in the boolean expression by prefixing it with 
  $; for example $addr names the field addr.</p>
<p>A trace item matches if the boolean expression evaluates to non-zero for that 
  item AND the expression contains at least one field present in that trace item. 
  For example, if you look for items satisfying $addr &gt;= 0x20000, a matching 
  item must contain an addr field; register writes, say, would be excluded.</p>
<p>Here are some examples of boolean expressions:<br>
  <code>$addr &gt;= 0x2000<br>
  $reg = 13 &amp;&amp; $value &lt; 10<br>
  $reg == 13 ? $value == 10 : $value = 1</code></p>
<h2>Adding marks</h2>
<p>You can &quot;mark&quot; lines by providing the line a logical name of your 
  own choice.</p>
<p>To add a mark:</p>
<ol>
  <li>Type the name you'd like to use in the <b>Marks</b> text field area.</li>
  <li>Click <b>[Enter].</b></li>
  <li>Select a line and either right-click <b>Mark</b> or press the <b>Mark</b> 
    button. That line is marked with the given name and an indicator appears to 
    its left.</li>
</ol>
<p>Later you can return to the marked line by name. Simply use the <b>Marks</b> 
  drop-down and pick the name you want. The debugger returns to that line automatically.</p>
<p>You can refer to a field of a marked line in a boolean expression with the 
  syntax $<i><b>M</b></i>$<i><b>F</b></i> where <i><b>M</b></i> is your mark name 
  and <i><b>F</b></i> the field name. Suppose you have marked some line as &quot;init&quot;, 
  and further suppose that line has the fields &quot;reg&quot; and &quot;addr&quot;. 
  You can then search on such boolean expressions as:<br>
  <code>$addr == $init$addr<br>
  $reg == $init$reg || $addr &gt; $init$addr</code></p>
<p>&nbsp;</p>
</body>
</html>
