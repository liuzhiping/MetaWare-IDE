<html>
<head>
<title>Profiling window</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel="StyleSheet" href="../default.css">
</head>
<body>

<h1>Profiling window</h1>

<p>The <b>Profiling</b> window:</p>

<ul>
  <li>displays profile interrupt ticks for the debugger's address counter interface; 
    using this interface, profile tick counts can be shown in the <a href="../displays/Source_Display.htm">Source</a>, 
    <a href="../displays/Disassembly_Display.htm">Disassembly</a>, and <a href="../displays/Functs.htm">Global 
    Functions</a> windows</li>
  <li>lets you configure the profiling runtime dynamically; you can control the range
    of PC addresses to profile, the number of code bytes each counter covers,
    the counter size, and the frequency at which the program is interrupted</li>
  <li>outputs profile information on demand; simply click the <b>Profile</b> button at any
    time while debugging the program</li>
</ul>

<p><i>Note:</i>&nbsp;&nbsp;You must <a href="../tasks/Profiling.htm">compile with profiling information</a> for profiling information to be available (see <a href="../tasks/Profiling.htm">Profiling your program</a> or the <I>High C/C++&#174; Programmer's Guide</I>).</p>

<p>The <b>Profiling</b> window lets you see and configure the execution profiling 
  information provided by the High C/C++ runtime. Profiling employs an interval 
  timer that interrupts the executing program with regular frequency. A counter 
  is incremented whenever the program is interrupted. Since each counter covers 
  a range of code addresses, the resulting table of counters gives an approximate 
  idea of where the program is spending its time.</p>

<p>The <b>Profiling</b> window can also summarize how instruction count, cycle 
  count, and cache-miss count are distributed among the functions in your program.</p>


<h3>Using the Profiling window</h3>
<p>To view a profile of your application:
<ol>
  <li>Open the <b>Profiling</b> window by selecting <b>Displays | Profiling</b>. 
    If the <b>Profiling</b> menu item does not exist, see <i>Troubleshooting Profiling</i> 
    in <a href="../tasks/Profiling.htm">Profiling Your Program</a>.</li>
  <li>Select the data to be summarized using the <b>Address counters</b> list.
    <p>If you selected &quot;Profiling interrupts,&quot; additional GUI components
      are made active so that you can further configure the profiling runtime.
      Profiling based on interrupts is statistical rather than fully accurate.
      If you are running your program on a simulator that provides instruction
      and/or cycle counts, we recommend profiling based on these counts, since
      the result is then fully accurate. Profiling address counters vary by target
      processor.</p>
  </li>
  <li>Click <b>Profile</b>.</li>
</ol>
<p>To save profiling output to a file:</p>
<ol>
  <li>Right-click in the <b>Profiling</b> window.</li>
  <li>Select <b>Save to File</b>.</li>
  <li>Browse to the location for the saved file.</li>
  <li>Enter a filename and extension.</li>
  <li>Click <b>Save</b>.</li>
</ol>
<h3>Viewing the profiling state</h3>
<p>The <b>Profile State</b> indicator, located at the upper left of the Profile
  <a href="Options_toolbar.htm">Options</a> toolbar, shows the state
  of the statistical profiling runtime support in the application.</p>
<ul>
  <li>A red indicator means that the application was not linked with statistical
    profiling support. Use the -p or -pg driver options when linking to include
    profiling support.</li>
  <li>A purple indicator means that profiling support is present but the application
    is still executing runtime startup code and the profiling support has not
    yet been initialized.</li>
  <li>A green indicator means that the profiling support is fully initialized
    and functioning.</li>
</ul>
<p>If you are not displaying profile interrupt counts but another count such as
  instruction counts, you can ignore the state indicator.</p>
<h3>Modifying profiling parameters</h3>
<p>You can modify the range of <i>PC Address Ranges to profile</i>, <i>Bytes Per
  Count</i>, <i>Profiling Counter Size</i>, and ticks between profile interrupts.</p>
<ol>
  <li>Open the <b>Profiling</b> window by selecting <b>Displays | Profiling</b>.</li>
  <li>Modify any of the following parameters:<br>
  </li>
  <ul>
    <li><i>PC Address Ranges</i><br>
      Enter the starting and ending addresses between which you want your program
      profiled, separated by a comma. Profiling begins with the starting address
      (inclusive), and continues up to but not including the ending address. If
      you do not enter a starting address, profiling begins with the symbol <code>_ftext</code>
      (the start of the .text section). If you do not enter an ending address,
      profiling stops at the symbol <code>_etext</code> (the first address beyond
      the end of the .text section). If the starting address is a function name,
      you can enter '$' as the ending address to indicate the end address of the
      function. You can also follow the starting and ending addresses with an
      offset in the form +&lt;offset&gt; or -&lt;offset&gt; (where &lt;offset&gt;
      is a literal integer).<br>
      <br>
      Examples:<br>
      <br>
      <code>
      <pre>
      0x1000,0x1fff   // address range 0x1000 to 0x1fff
      0x1000,         // address range 0x1000 to _etext
      ,0x1000         // address range _ftext to 0x1000
      Try,$           // address range from function Try to the end of Try
      Try             // address range from Try to _etext
      ,               // address range _ftext to _etext
  </pre>
      </code></li>
    <li><i>Bytes Per Count</i><br>
      Bytes-per-count specifies the size of the region of code assigned to each
      profiling counter. One profiling counter for each possible PC address would
      be optimal accuracy. For example, in RISC architectures with 4-byte instructions,
      you can obtain the most accurate profiling by having each counter cover
      4 bytes of code. However, the smaller the region of code covered by each
      counter, the greater the memory that is required to maintain the counters.
      Thus, if there is insufficient memory to allow optimal coverage, you can
      set the counters to cover larger sections of code. You can also reduce the
      number of counters by restricting the range of code being profiled.<br>
    </li>
    <li><i>Profile Counter Size</i><br>
      Select the size of the profiling counters. By default each counter is 16-bits,
      to save memory. However, if your application is long-running and the 16-bit
      counters are overflowing, you may wish to increase the size to 32-bit counters.
      Note that 32-bit counters require twice as much memory as 16-bit counters.
      <p>You can also increase the bytes-per-count value and/or restrict the range
        of the program being profiled to compensate for the extra memory required
        for 32-bit counters.<br>
      </p>
    </li>
    <li><i>Countdown Interrupt Ticks</i><br>
      This text box allows you to adjust the frequency with which profiling interrupts
      occur. The value shown is the number of timer clock ticks between each profile
      interrupt. You can increase accuracy by reducing the number of ticks. However,
      your program then runs slower. The minimum number of ticks that is possible
      varies.<br>
      <br>
      NOTE: this parameter may not be supported for all runtime environments.<br>
      <br>
    </li>
  </ul>
  <li>Click the <b>Send</b> button to send your settings to the program. After
    you click <b>Send</b>, the debugger displays a summary of the settings you
    have sent.</li>
</ol>
<p>&nbsp;</p>
</BODY>
</HTML>
