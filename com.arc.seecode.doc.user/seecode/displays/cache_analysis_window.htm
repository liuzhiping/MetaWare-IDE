<html>
<head>
<title>Using the cache analysis window</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<link rel=StyleSheet href="../default.css">

</head>

<body>
<h1>cache analysis window</h1>
<p>Open a <b>Data cache analysis</b> or <b>Instruction cache analysis</b> 
window by clicking <b>Analyze</b> in 
the <b>Data cache</b> or <b>Instruction cache</b> window when 
<a href="../tasks/ces.htm">
cycle estimation</a> is enabled.
This window presents an analysis of the cache performance, including 
identification of lines that thrashed during program execution and as such
may impact program performance.</p>

<p>Memory in your program is divided up into lines; each line
has a size determined by the cache.  For example, a line may
be 32 bytes (8 4-byte words).  Each line goes into the cache
in a particular so-called "set", based upon the address of the line.
The cache is composed of a fixed number of sets.  Each set contains
one or more lines. In a direct-mapped cache, each set contains just
one line.  In an N-way cache, each set contains N lines.  A line 
in your program mapped to set S may be placed in any of the N
lines in an N-way cache, depending upon the cache algorithms.</p>

<p>The cost of accessing memory in a line in memory is the cost of
loading it into the cache if the line is not already present 
in the cache (approximately 1 cycle per word in the line)
and the cost of accessing the cache if the line is already present
(often just 1 cycle).  For the purposes of computing cache efficiency,
we assume these 1 cycle numbers, and present for each line in memory
the access cost of memory references in that line.  The access
cost is access_cycles/(miss+hits), where access_cycles = 
(miss*words_in_line + hits).  You want the access cost
should be as close to 1 as possible, which means that most accesses
hit.  An access cost that exceeds 1.2 is flagged in this window with
"<- !" in the listing of lines of your program.</p>

<p>Each line is presented in the form</p>
<pre>
	(addr co C mi M cy Y)
</pre>
<p>where addr is the line address, C is the access cost, M is the total
number of misses, and Y the total number of access cycles.</p>

<p>First, each set of the cache is shown, and all lines that at one
time or the other occupied that set.  In this way you can see which
lines compete with others for residence in the cache.</p>

<p>Next, a thrash analysis is performed, identifying for each set lines
in that set that appear to have "thrashed" -- meaning they were loaded
into the cache, accessed not a lot, and dumped from the cache by
a contenting line or lines from memory.  We attempt to pair up
lines that thrashed each other, signified by similar miss counts.
The solution to thrashing lines may be adding ways to your cache or
reorganizing your program in memory via linker directives to locate
contending lines in different sets.</p>

<p>Finally, all the lines in your program are printed, with the total
number of misses, hits, access cycles, access cost, and the program label
corresponding to the line.  Lines identified with <- ! should be looked
at as having high access cost.  The lines are printed first in address
order, then sorted according to access cost.</p>

<p>&nbsp;</p>
</body>

</html>